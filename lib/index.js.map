{"version":3,"sources":["../es/index.js"],"names":["axiosRetry","axios","retries","retryCondition","error","response","interceptors","use","config","Promise","reject","retryCount","shouldRetry","defaults","agent","httpAgent","httpsAgent"],"mappings":";;;;;kBA6BwBA,U;;AA7BxB;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2Be,SAASA,UAAT,CAAoBC,KAApB,EAGP;AAAA,iFAAJ,EAAI;AAAA,0BAFNC,OAEM;AAAA,MAFNA,OAEM,gCAFI,CAEJ;AAAA,iCADNC,cACM;AAAA,MADNA,cACM,uCADW;AAAA,WAAS,CAACC,MAAMC,QAAhB;AAAA,GACX;;AACNJ,QAAMK,YAAN,CAAmBD,QAAnB,CAA4BE,GAA5B,CAAgC,IAAhC,EAAsC,iBAAS;AAC7C,QAAMC,SAASJ,MAAMI,MAArB;;AAEA;AACA,QAAI,CAACA,MAAL,EAAa;AACX,aAAOC,QAAQC,MAAR,CAAeN,KAAf,CAAP;AACD;;AAEDI,WAAOG,UAAP,GAAoBH,OAAOG,UAAP,IAAqB,CAAzC;;AAEA,QAAMC,cAAcT,eAAeC;AACjC;AADkB,SAEfI,OAAOG,UAAP,GAAoBT,OAFL,IAGf,8BAAeE,KAAf,CAHL;;AAKA,QAAIQ,WAAJ,EAAiB;AACfJ,aAAOG,UAAP;;AAEA;AACA;AACA,UAAIV,MAAMY,QAAN,CAAeC,KAAf,KAAyBN,OAAOM,KAApC,EAA2C;AACzC,eAAON,OAAOM,KAAd;AACD;AACD,UAAIb,MAAMY,QAAN,CAAeE,SAAf,KAA6BP,OAAOO,SAAxC,EAAmD;AACjD,eAAOP,OAAOO,SAAd;AACD;AACD,UAAId,MAAMY,QAAN,CAAeG,UAAf,KAA8BR,OAAOQ,UAAzC,EAAqD;AACnD,eAAOR,OAAOQ,UAAd;AACD;;AAED,aAAOf,MAAMO,MAAN,CAAP;AACD;;AAED,WAAOC,QAAQC,MAAR,CAAeN,KAAf,CAAP;AACD,GAlCD;AAmCD","file":"index.js","sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [options]\n * @param {number} [options.retries=3] Number of retries\n */\nexport default function axiosRetry(axios, {\n  retries = 3,\n  retryCondition = error => !error.response\n} = {}) {\n  axios.interceptors.response.use(null, error => {\n    const config = error.config;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    config.retryCount = config.retryCount || 0;\n\n    const shouldRetry = retryCondition(error)\n      // && error.code !== 'ECONNABORTED'\n      && config.retryCount < retries\n      && isRetryAllowed(error);\n\n    if (shouldRetry) {\n      config.retryCount++;\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures\n      if (axios.defaults.agent === config.agent) {\n        delete config.agent;\n      }\n      if (axios.defaults.httpAgent === config.httpAgent) {\n        delete config.httpAgent;\n      }\n      if (axios.defaults.httpsAgent === config.httpsAgent) {\n        delete config.httpsAgent;\n      }\n\n      return axios(config);\n    }\n\n    return Promise.reject(error);\n  });\n}\n"]}